package awt;

import com.sun.btrace.annotations.*;
import static com.sun.btrace.BTraceUtils.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

@BTrace(name="AWTStats") public class AWTTracer {
    // <fragment name="utilization">
    private static long timeInEDT = 0;
    private static long timeInPaint = 0;
    private static long timeInLayout = 0;

    @Property volatile private static int dispatch = 0;
    @Property volatile private static int paint = 0;
    @Property volatile private static int layout = 0;

    @OnMethod(
        clazz="java.awt.EventQueue",
        method="dispatchEvent",
        location=@Location(value=Kind.RETURN)
    )
    public static void onDispatch(@Duration long time) {
        timeInEDT += time;
    }

    @OnMethod(
        clazz="javax.swing.RepaintManager",
        method="paint",
        location=@Location(value=Kind.RETURN)
    )
    public static void onPaint(@Duration long time) {
        timeInPaint += time;
    }

    @OnMethod(
        clazz="+java.awt.LayoutManager",
        method="layoutContainer",
        location=@Location(value=Kind.RETURN)
    )
    public static void onLayout(@Duration long time) {
        timeInLayout += time;
    }
    // </fragment>

    @OnTimer(value=1000)
    public static void calcRates() {
        // <fragment name="utilization">
        long inLayout = timeInLayout;
        long inPaint = timeInPaint;
        long edt = timeInEDT;
        timeInLayout = 0;
        timeInPaint = 0;
        timeInEDT = 0;

        dispatch = (int)edt / 10000000; // 1000000000(as nanoseconds in 1 second) * 100(as %)
        paint = (int)inPaint / 10000000;
        layout = (int)inLayout / 10000000;
        // </fragment>
    }
}