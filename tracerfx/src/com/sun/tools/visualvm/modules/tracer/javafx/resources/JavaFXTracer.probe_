/*
 * Copyright 2009-2010 Sun Microsystems, Inc.  All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
 */

import com.sun.btrace.annotations.*;
import static com.sun.btrace.BTraceUtils.*;
import java.util.Map;
import java.lang.ref.*;
import com.sun.javafx.runtime.FXObject;
import java.util.concurrent.atomic.AtomicLong;

/**
 * This BTrace script tries to measure aggregate stat like total
 * FXObject count, total dependent count, total notification count etc.
 * This script measures histogram of FXObjects as well.
 *
 * @author A. Sundararajan
 * @author J. Bachorik
 */
@BTrace(name="FxBtraceTracker", unsafe=true) public class FxBtraceTracker {

    // @Property exposes this field as MBean attribute
    // double buffer
    private static Map<String, Integer> histo1 = newHashMap();
    private static Map<String, Integer> histo2 = newHashMap();
    private static int bufferIndex = 1;

    @Property
    private static Map<String, Integer> histo = histo1;

    volatile private static long fxObjectCountRunning = 0;

    @Property private static long fxObjectCreationRate = Long.MIN_VALUE;
    @Property private static long fxObjectDeletionRate = 0;

    @Property private static long invalidationRate = Long.MIN_VALUE;
    volatile private static long invalidations = 0;

    @Property private static long replacementRate = Long.MIN_VALUE;
    volatile private static long replacements = 0;


    @OnMethod(
	clazz="com.sun.javafx.runtime.FXBase",
        method="<init>"
    )
    public static void onNewFXObject(@Self Object obj, boolean dummy) {
        fxObjectCountRunning++;
        //track(obj, fxObjectCount, fxObjectShallowSize);

        String cn = name(classOf(obj));
        Integer i = get(histo, cn);
        if (i == null) {
            i = box(1);
        } else {
            i = box(unbox(i) + 1);
        }
        put(histo, cn, i);
    }

    @OnMethod(
        clazz="+com.sun.javafx.runtime.FXBase",
        method="/invalidate\\$.+/"
    )
    public static void onInvalidate() {
        invalidations++;
    }

    @OnMethod(
        clazz="+com.sun.javafx.runtime.FXBase",
        method="/onReplace\\$.+/",
        location=@Location(Kind.RETURN)
    )
    public static void onOnReplaceReturn() {
        replacements++;
    }

    @OnTimer(1000)
    public static void calculatePerSecondRates() {
        fxObjectCreationRate = fxObjectCountRunning;
        invalidationRate = invalidations;
        replacementRate = replacements;
        fxObjectCountRunning = 0;
        invalidations = 0;
        replacements = 0;
        if (bufferIndex == 1) {
            bufferIndex = 2;
            histo = histo2;
            clear(histo1);
        } else {
            bufferIndex = 1;
            histo = histo1;
            clear(histo2);
        }
    }
}