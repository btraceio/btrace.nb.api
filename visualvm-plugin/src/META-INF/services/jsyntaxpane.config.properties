#
# BTraceSyntaxKit
#

BTraceSyntaxKit.ValueSeparator = ;
BTraceSyntaxKit.Components = jsyntaxpane.components.PairsMarker; \
    jsyntaxpane.components.LineNumbersRuler; \
    jsyntaxpane.components.TokenMarker
BTraceSyntaxKit.TokenMarker.TokenTypes = IDENTIFIER; TYPE; TYPE2; TYPE3
#
# Performs single color selection (Default = false)
#
BTraceSyntaxKit.SingleColorSelect = true
#
# DIsplaying of a right margin line.  If RightMarginColumn is 0, then no margin
# will be displayed
BTraceSyntaxKit.RightMarginColumn = 0
BTraceSyntaxKit.RightMarginColor = 0xdddddd
BTraceSyntaxKit.Action.PARENTHISIS = jsyntaxpane.actions.PairAction; typed (
BTraceSyntaxKit.Action.BRACKETS = jsyntaxpane.actions.PairAction; typed [
BTraceSyntaxKit.Action.QUOTE = jsyntaxpane.actions.PairAction; typed '
BTraceSyntaxKit.Action.DBL_QUOTE = jsyntaxpane.actions.PairAction; typed "
BTraceSyntaxKit.Action.CLOSE_CURLY = jsyntaxpane.actions.JUnindentAction; typed }
BTraceSyntaxKit.Action.TOGGLE_COMMENTS = jsyntaxpane.actions.ToggleCommentsAction; control SLASH
# For completions, you have to define the Action (key to trigger completions):
# BTraceSyntaxKit.Action.COMPELTION = jsyntaxpane.actions.MapCompletionAction; control SPACE
BTraceSyntaxKit.Action.COMBO_COMPELTION = jsyntaxpane.actions.ComboCompletionAction; control SPACE
# and then the specified completions map in the below file
BTraceSyntaxKit.Completions.File = jsyntaxpane.BTraceSyntaxKit.completions
#
# These are the completions to be in the IntelliSense completion dialog
# comma separated values.
# Vertical bars: if there is one, it will position the cursor.  If there are
# two, they will be start and end of selection
BTraceSyntaxKit.COMBO_COMPELTION.Items = public; private; class; static; \
  BTrace; OnMethod(|); OnTimer(|); OnEvent(|); OnExit(); OnProbe(); Location(); Where; Kind; \
  TLS; Export; Property; Self; Return; CalledInstance; CalledMethod; \
  clazz; method; kind; where; value; field; line; pool; threshold; namespace; name; description; \
  $(|argNum|); $length(); accessFlags(|); addAndGet(|atomic|); addToAggregation(|aggregation|); availableProcessors(); \
  bootClassPath(); box(|primitive|); classForName(|className|); classForName(|className|, |classLoader|); \
  classOf(|obj|), classPath(); clear(|map|); clearAggregation(|aggregation|); commit(|speculationID|); commited(|memoryUsage|); \
  compare(|obj1|, |obj2|); compareAndSet(|atomic|, |expect|, |update|); compareTo(|str1|, |str2|); compareToIgnoreCase(|str1|, |str2|); \
  concat(|str1|, |str2|); contains(|coll|, |value|); containsKey(|map|, |key|); containsValue(|map|, |value|); contextClassLoader(); \
  currentThread(); currentThreadCPUTime(); currentThreadUserTime(); daemonThreadCount(); deadlocks(); deadlocks(|takeStackTrace|); \
  declaringClass(|field|); decrementAndGet(|atomic|); deref(|ref|); discard(|speculationID|); dtraceProbe(|str1|, |str2|); \
  dtraceProbe(|str1|, |str2|, |i1|); dtraceProbe(|str1|, |str2|, |i1|, |i2|); dumpHeap(|fileName|); dumpHeap(|fileName|, |live|); \
  endsWith(|str|, |end|); exit(|code|); exit(); exp(|a|); field(|clazz|, |name|, |throwException|); field(|clazz|, |name|); \
  field(|clazzName|, |name|, |throwException|); field(|clazzName|, |name|); finalizationCount(); freeMemory(); gc(); get(|field|); \
  get(|field|, |obj|); get(|map|, |key|); get(|atomic|); getAndAdd(|atomic|, |delta|); getAndDecrement(|atomic|); \
  getAndIncrement(|atomic|); getAndSet(|atomic|, |newVal|); getBoolean(|field|); getBoolean(|field|, |obj|); getByte(|field|); \
  getByte(|field|, |obj|); getChar(|field|); getChar(|field|, |obj|); getComponentType(|clazz|); getDouble(|field|); \
  getDouble(|field|, |obj|); getFloat(|field|); getFloat(|field|, |obj|); getInt(|field|); getInt(|field|, |obj|); \
  getLong(|field|); getLong(|field|, |obj|); getShort(|field|); getShort(|field|, |obj|); getSuperclass(|clazz|); getenv(); \
  getenv(|name|); getpid(); hash(|obj|); heapUsage(); holdsLock(|lock|); identityHashCode(|obj|); identityStr(|obj|); \
  incrementAndGet(|atomic|); indexOf(|str1|, |str2|); init(|memoryUsage|); isArray(|clazz|); isAssignableFrom(|a|, |b|); \
  isBootClassPathSupported(); isEmpty(|coll|); isInfinite(|number|); isInstance(|clazz|, |obj|); isInterface(|clazz|); \
  isInterrupted(); isNaN(|number|); isPrimitive(|clazz|); jstack(); jstack(|numFrames|); jstack(|throwable|); \
  jstack(|throwable|, |numFrames|); jstackAll(); jstackAll(|numFrames|); jstackAllStr(); jstackAllStr(|numFrames|); \
  jstackStr(); jstackStr(|throwable|); jstackStr(|throwable|, |numFrames|); lastIndexOf(|str1|, |str2|); lazySet(|atomic|, |newValue|); \
  length(|str|); libraryPath(); loader(|clazz|); log(|double|); log10(|double|); matches(|regex|, |input|); max(|memoryUsage|); \
  maxMemory(); name(|thread|); name(|clazz|); name(|field|); newAggregation(|AggregationFunction.|); newAggregationKey(|elem1|); \
  newAggregationKey(|elem1|, |elem2|); newAggregationKey(|elem1|, |elem2|, |elem3|); newAggregationKey(|elem1|, |elem2|, |elem3|, |elem4|); \
  newAtomicInteger(|initValue|); newAtomicLong(|initValue|); newDeque(); newHashMap(); newWeakMap(); nonHeapUsage(); parentLoader(|loader|); \
  parseBoolean(|s|); parseByte(|s|); parseDouble(|s|); parseFloat(|s|); parseInt(|s|); parseLong(|s|); parseShort(|s|); pattern(|regex|); \
  pattern(|regex|, |flags|); peakThreadCount(); peek(|deque|); perfInt(|name|); perfLong(|name|); perfString(|name|); poll(|deque|); \
  print(|arg|); println(|arg|); printAggregation(|name|, |aggregation|); printArray(|array|); printEnv(); printFields(|obj|); \
  printMap(|map|); printNumber(|name|, |value|); printNumberMap(|name|, |map|); printProperties(); printStaticFields(|clazz|); \
  printStaticFields(|clazz|, |useClassNamePrefix|); printStringMap(|name|, |map|); printVMArguments(); probeClass(); probeLine(); \
  probeMethod(); properties(); property(|key|); push(|deque|, |value|); put(|map|, |key|, |value|); random(); regexp(|regex|); \
  remove(|map|, |key|); runFinalization(); serialize(|obj|, |fileName|); set(|atomic|, |value|); size(|coll|); sizeof(|obj|); \
  softRef(|obj|); speculate(|speculationID|); speculation(); startsWith(|s|, |start|); str(|arg|); strcat(|str1|, |str2|); \
  strcmp(|str1|, |str2|); stricmp(|str1|, |str2|); strlen(|str|); strstr(|str1|, |str2|); substr(|str|, |start|, |len|); \
  substr(|str|, |start|); threadCount(); threadId(|thread|); threadState(|thread|); timeMillis(); timeNanos(); toHexString(|num|); \
  toXML(|obj|); totalMemory(); totalStartedThreadCount(); truncateAggregation(|aggregation|, |count|); type(|field|); \
  unbox(|obj|); used(|memoryUsage|); vmArguments(); vmStartTime(); vmUptime(); vmVersion(); weakCompareAndSet(|atomic|, |expected|, |update|); \
  weakRef(|obj|); writeXML(|obj|, |fileName|); \
  [AggregationFunction].COUNT; [AggregationFunction].AVERAGE; [AggregationFunction].MAXIMUM; [AggregationFunction].MINIMUM; \
  [AggregationFunction].QUANTIZE; [AggregationFunction].SUM; \
  [Kind].CALL; [Kind].ENTRY; [Kind].RETURN; [Kind].ARRAY_GET; [Kind].ARRAY_SET; [Kind].CATCH; [Kind].CHECKCAST; [Kind].ERROR; \
  [Kind].FIELD_GET; [Kind].FIELD_SET; [Kind].INSTANCEOF; [Kind].LINE; [Kind].NEW; [Kind].NEWARRAY; [Kind].SYNC_ENTRY; \
  [Kind].SYNC_EXIT; [Kind].THROW; \
  [Where].AFTER; [Where].BEFORE;
